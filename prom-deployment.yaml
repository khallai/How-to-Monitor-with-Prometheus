#the strategy used in the prometheus deployment file requires the use of rollingUpdates
#which allow Deployment update to take place with zero downtime by incrementally 
#updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources.
#Under args section arguments and commnads are defined when the pod is created. 

apiVersion: apps/v1
kind: Deployment
metadata:
      labels:
        name: prometheus
      name: prometheus
      namespace: monitoring
      spec:
      replicas: 1
      selector:
        matchLabels:
          name: prometheus
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: prometheus
            image: <Image>
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "9090"
        spec:
          containers:
          - args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/etc/prometheus
            - --storage.tsdb.retention=24h
            command:
            - /bin/prometheus
            image: quay.io/prometheus/prometheus:v2.45.0
            imagePullPolicy: IfNotPresent
            name: prometheus
            ports:
            - containerPort: 9090
              protocol: TCP
            resources:
              limits:
                cpu: 500m
                memory: 2500Mi
              requests:
                cpu: 100m
                memory: 100Mi
            volumeMounts:
            - mountPath: /prometheus
              name: data
            - mountPath: /etc/prometheus
              name: config-volume
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: data
          - configMap:
              name: prometheus-config
            name: config-volume


